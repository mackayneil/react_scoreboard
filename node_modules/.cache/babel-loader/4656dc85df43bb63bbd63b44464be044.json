{"ast":null,"code":"var _jsxFileName = \"/Users/neilmackay/Documents/GitHub2021/react_scoreboard/src/components/Stopwatch.js\";\nimport React, { Component } from \"react\";\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\n\nclass Stopwatch extends Component {\n  constructor(...args) {\n    super(...args);\n    this.state = {\n      isRunning: false,\n      elapsedTime: 0,\n      previousTime: 0\n    };\n\n    this.tick = () => {\n      if (this.state.isRunning) {\n        const now = Date.now();\n        this.setState({\n          previousTime: now,\n          elapsedTime: this.state.elapsedTime + (now - this.state.previousTime)\n        });\n      }\n    };\n\n    this.handleStopWatch = () => {\n      this.setState({\n        isRunning: !this.state.isRunning\n      });\n\n      if (!this.state.isRunning) {\n        this.setState({\n          previousTime: Date.now()\n        });\n      }\n    };\n  }\n\n  componentDidMount() {\n    this.intervalID = setInterval(() => this.tick(), 100);\n  }\n\n  render() {\n    return /*#__PURE__*/_jsxDEV(\"div\", {\n      className: \"stopwatch\",\n      children: [/*#__PURE__*/_jsxDEV(\"h2\", {\n        children: \"Stopwatch\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 39,\n        columnNumber: 17\n      }, this), /*#__PURE__*/_jsxDEV(\"span\", {\n        className: \"stopwatch-time\",\n        children: \"0\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 40,\n        columnNumber: 17\n      }, this), /*#__PURE__*/_jsxDEV(\"button\", {\n        onClick: this.handleStopWatch,\n        children: this.state.isRunning ? 'Stop' : \"Start\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 41,\n        columnNumber: 17\n      }, this), /*#__PURE__*/_jsxDEV(\"button\", {\n        children: \"Reset\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 44,\n        columnNumber: 17\n      }, this)]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 38,\n      columnNumber: 13\n    }, this);\n  }\n\n}\n\nexport default Stopwatch;","map":{"version":3,"sources":["/Users/neilmackay/Documents/GitHub2021/react_scoreboard/src/components/Stopwatch.js"],"names":["React","Component","Stopwatch","state","isRunning","elapsedTime","previousTime","tick","now","Date","setState","handleStopWatch","componentDidMount","intervalID","setInterval","render"],"mappings":";AAAA,OAAOA,KAAP,IAAeC,SAAf,QAA+B,OAA/B;;;AAEA,MAAMC,SAAN,SAAwBD,SAAxB,CAAkC;AAAA;AAAA;AAAA,SAE9BE,KAF8B,GAEtB;AACJC,MAAAA,SAAS,EAAE,KADP;AAEJC,MAAAA,WAAW,EAAE,CAFT;AAGJC,MAAAA,YAAY,EAAE;AAHV,KAFsB;;AAAA,SAY9BC,IAZ8B,GAYvB,MAAM;AACT,UAAI,KAAKJ,KAAL,CAAWC,SAAf,EAA0B;AACtB,cAAMI,GAAG,GAAGC,IAAI,CAACD,GAAL,EAAZ;AACA,aAAKE,QAAL,CAAc;AACVJ,UAAAA,YAAY,EAAEE,GADJ;AAEVH,UAAAA,WAAW,EAAE,KAAKF,KAAL,CAAWE,WAAX,IAA0BG,GAAG,GAAG,KAAKL,KAAL,CAAWG,YAA3C;AAFH,SAAd;AAIH;AACJ,KApB6B;;AAAA,SAsB9BK,eAtB8B,GAsBZ,MAAM;AACpB,WAAKD,QAAL,CAAc;AACVN,QAAAA,SAAS,EAAE,CAAC,KAAKD,KAAL,CAAWC;AADb,OAAd;;AAGA,UAAG,CAAC,KAAKD,KAAL,CAAWC,SAAf,EAA0B;AACtB,aAAKM,QAAL,CAAc;AACVJ,UAAAA,YAAY,EAAEG,IAAI,CAACD,GAAL;AADJ,SAAd;AAGH;AACJ,KA/B6B;AAAA;;AAQ9BI,EAAAA,iBAAiB,GAAG;AAChB,SAAKC,UAAL,GAAkBC,WAAW,CAAC,MAAM,KAAKP,IAAL,EAAP,EAAoB,GAApB,CAA7B;AACH;;AAuBDQ,EAAAA,MAAM,GAAG;AACL,wBACI;AAAK,MAAA,SAAS,EAAC,WAAf;AAAA,8BACI;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,cADJ,eAEI;AAAM,QAAA,SAAS,EAAC,gBAAhB;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,cAFJ,eAGI;AAAQ,QAAA,OAAO,EAAE,KAAKJ,eAAtB;AAAA,kBACK,KAAKR,KAAL,CAAWC,SAAX,GAAuB,MAAvB,GAAgC;AADrC;AAAA;AAAA;AAAA;AAAA,cAHJ,eAMI;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,cANJ;AAAA;AAAA;AAAA;AAAA;AAAA,YADJ;AAUH;;AA5C6B;;AA+ClC,eAAeF,SAAf","sourcesContent":["import React, {Component} from \"react\";\n\nclass Stopwatch extends Component {\n\n    state = {\n        isRunning: false,\n        elapsedTime: 0,\n        previousTime: 0\n    }\n\n    componentDidMount() {\n        this.intervalID = setInterval(() => this.tick(), 100)\n    }\n\n    tick = () => {\n        if (this.state.isRunning) {\n            const now = Date.now();\n            this.setState({\n                previousTime: now,\n                elapsedTime: this.state.elapsedTime + (now - this.state.previousTime)\n            })\n        }\n    }\n\n    handleStopWatch = () => {\n        this.setState({\n            isRunning: !this.state.isRunning\n        });\n        if(!this.state.isRunning) {\n            this.setState({\n                previousTime: Date.now()\n            })\n        }\n    }\n\n    render() {\n        return (\n            <div className=\"stopwatch\">\n                <h2>Stopwatch</h2>\n                <span className=\"stopwatch-time\">0</span>\n                <button onClick={this.handleStopWatch}>\n                    {this.state.isRunning ? 'Stop' : \"Start\"}\n                </button> \n                <button>Reset</button>\n            </div>\n        )\n    }\n}\n\nexport default Stopwatch"]},"metadata":{},"sourceType":"module"}